@page "/CV"
@using System.Xml.Linq
@using Mijn_Curriculum_Vitae.CV_View
@using Mijn_Curriculum_Vitae.CV_Edit

@{
	SetRandHueColors();
}

<style>
	body {
		display: block;
		margin: 8px;
	}

	table {
		border-radius: 4px;
		border: none;
		width: 200px;
	}

	td {
		border: none;
	}

	div {

	}

	a{
	text-decoration: none !important;
	}
		a:link {
			color: black;
		}
		a:visited {
			color: black;
		}

	input {
		padding: 5px;
		border: 1px solid #ccc;
		border-radius: 24px;
		transition: 0.5s;
		width: 150px
	}

		input[type=text]:focus {
			border: 1px solid #000;
		}

	fieldset {
		border-radius: 24px;
		border-width: 2px;
	}

	.rootcolor {
		background-color: @HueBaseColor();
	}

	.rootcolorvar1 {
		background-color: @HueBaseColorVar1();
	}

	.rootcolorvar2 {
		background-color: @HueBaseColorVar2();
	}

	.rootcolorvar3 {
		background-color: @HueBaseColorVar2();
	}

	.flex-container {
		display: flex;
		padding-bottom: 15px;
		flex-wrap: wrap;
		justify-content: center;
		background-color: @SetHueColorsBackground();
		border-radius: 24px;
	}
		.flex-container > div {
			background-image: linear-gradient(to left top, @SetHueColorCardsGradient());
			margin: 10px;
			padding: 15px;
			font-size: 13px;
			border-radius: 24px;
		}

	.basic{
		padding:5px;
		align-items: center;
		display: flex;
		justify-content: center;
		}

	img {
		border-radius: 24%;
	}

	button {
		background-color:transparent;
		border:none;
		align-items: center;
	}

	.minus{
		background-image: url(minus-white.png);
	}
	.plus {
		background-image: url(plus-circle.png);
	}

	.rotate{
		padding: 5px;
		font-size: 11px;
		color: rgb(100,100,100);
		z-index: -1;
		position: relative;
	}

</style>


@*<CascadingValue Value="@RandColor"><Css /></CascadingValue>
*@
@*@{choice = "kkk";}
*@

@*<!----><input placeholder="Accesscode" @bind="Accesscode" />
<button @onclick="Access">Access</button>-->*@

@{
        ////////////////////////////////////////////////////////////////////////////////////////
        // eenmalig xml lezen en object Curriculum opbouwen dat een afspiegeling is van XElement
        ////////////////////////////////////////////////////////////////////////////////////////
        if (teller == 1)
        {
        // Object XMLData wordt aangemaakt en bij constructie wordt
        // de juiste XML file ingelezen en omgezet naar een Curriculum object
        // om te voorkomen dat telkens een nieuw XMLData object wordt aangemaakt als de pagina
        // aangeroepen wordt hebben we de truc met teller bedacht.
        XmlData = new XMLData();
        Curriculum = @XmlData.GetCurriculum();
        teller++;
        }
        /////////////////////////////////////////////////
        /////////////////////////////////////////////////
        ///////////////////////////////////////////////////

        if (@Accesscode == null)
        {
        return;
        }

        /////////////////////////////////////////////////
        // Data in object Curriculum gaat naar HTML
        /////////////////////////////////////////////////
        if (@Accesscode != "jjjjjjjjjjj")
        {
        //////var a = ListOFCV.FirstOrDefault(a => a.Access == Accesscode);

	<div class="flex-container">CV

			<header class="basic" style="background-color:none; display: flex; justify-content:  center;">
				<CascadingValue Value="@Curriculum">
					<CascadingValue Value="@XmlData">
						<EditFront />
					</CascadingValue>
				</CascadingValue>
			</header>

			@{
			//<header class="basic" style="background-color:none; display: flex; justify-content:  center;">
			//	<CascadingValue Value="@Curriculum">
			//		<CascadingValue Value="@XmlData">
			//			<EditMenu />
			//		</CascadingValue>
			//	</CascadingValue>
			//</header>
			}

			<div class="basic" style="background-color:none; display: flex; justify-content:  center;">
				<div style="align-items: center; display: flex; justify-content: center;">
				<CascadingValue Value="@Curriculum">
					<CascadingValue Value="@XmlData">
						<EditDating />
					</CascadingValue>
				</CascadingValue>
				</div>
			</div>


			<div class="basic" style="align-items: center; display: flex; justify-content: center;">
				<div>
					<CascadingValue Value="@Curriculum">
						<CascadingValue Value="@XmlData">
							<EditNaam />
						</CascadingValue>
					</CascadingValue>
					<br>
					<CascadingValue Value="@Curriculum">
						<CascadingValue Value="@XmlData">
							<EditLocatie />
						</CascadingValue>
					</CascadingValue>
					<br>

				</div>
			</div>

		<header class="flex-container" style="align-items: center; display: flex; justify-content: center;">
		<CascadingValue Value="@Curriculum">
			<CascadingValue Value="@XmlData">
				<EditVrijetijdsbesteding />
			</CascadingValue>
		</CascadingValue>
		</header>

			<div class="basic" style="align-items: center; display: flex; justify-content: center;">
				<CascadingValue Value="@Curriculum">
					<CascadingValue Value="@XmlData">
						<EditWerkervaring />
					</CascadingValue>
				</CascadingValue>
			</div>

			<div class="basic" style="align-items: center; display: flex; justify-content: center;">
				<CascadingValue Value="@Curriculum">
					<CascadingValue Value="@XmlData">
						<EditOpleiding />
					</CascadingValue>
				</CascadingValue>
			</div>

			<div class="basic" tyle="align-items: center; display: flex; justify-content: center;">
				<CascadingValue Value="@Curriculum">
					<CascadingValue Value="@XmlData">
						<EditVaardigheden />
					</CascadingValue>
				</CascadingValue>
			</div>

			<div class="basic" style="align-items: center; display: flex; justify-content: center;">
				<CascadingValue Value="@Curriculum">
					<CascadingValue Value="@XmlData">

						<EditFunctions />
					</CascadingValue>
				</CascadingValue>
			</div>
	</div>
	<br />
	<button @onclick="Save">Save</button>

        }
        /////////////////////////////////////////////////
        /////////////////////////////////////////////////
}

@code
{
	// FIELDS
	XMLData XmlData;
	int teller = 1;
	private string Accesscode = "go";

	public Curriculum Curriculum;

	public RandColor RandColor;

	List<Curriculum> ListOFCV = new List<Curriculum>();

	public string sadfasd { get; set; }
	// METHODS
	void Access()
	{
	//@<p>kkkkkkkkkkk</p>
	}

	////////////////////////////////////////////////////////////////////////////
	// Object Curriculum wordt omgezet naar XML - XML wordt naar file geschreven
	////////////////////////////////////////////////////////////////////////////
	private void Save()
	{
	XmlData.Save(Curriculum);
	}
	/////////////////////////////////////////////////
	/////////////////////////////////////////////////



	public int hueMin;
	public int hueBase;
	public int huePlus;

	void SetRandHueColors()
	{
		hueBase = RandColor.RanDom.Next(0, 360);
		int huePlusWeg = hueBase + 30;
		hueMin = hueBase - 30;

		if (huePlusWeg >= 360)
		{
			huePlus = huePlusWeg - 360;
		}
		else
		{
			huePlus = huePlusWeg;
		}
	}

	string HueBaseColor()
	{

	int s = 100;
	int l = 50;
	string randc = $"hsl(" + hueBase.ToString() + "," + s.ToString() + "%," + l.ToString() + "%)";
	return randc;
	}

	string HueBaseColorVar1()
	{

	int s = 100;
	int l = 80;
	string randc = $"hsl(" + hueBase.ToString() + "," + s.ToString() + "%," + l.ToString() + "%)";
	return randc;
	}

	string HueBaseColorVar2()
	{

	int s = 100;
	int l = 30;
	string randc = $"hsl(" + hueBase.ToString() + "," + s.ToString() + "%," + l.ToString() + "%)";
	return randc;
	}

	string SetHueColorsBackground()
	{
		int s = 50;
		int l = 80;
		string randc = $"hsl(" + huePlus.ToString() + "," + s.ToString() + "%," + l.ToString() + "%)";
		return randc;
	}

	string SetHueColorCardsGradient()
	{
		int h = RandColor.RanDom.Next(0, 360);
		int s = 40;
		int l = 60;
		string randc = $"hsl(" + hueMin.ToString() + "," + s.ToString() + "%," + l.ToString() + "%)";
		randc += "," + $"hsl(" + hueMin.ToString() + "," + s.ToString() + "%," + (l - 15).ToString() + "%)";
		return randc;
	}
}


