@page "/"
@using System.Xml.Linq
@using System.Text
@using Mijn_Curriculum_Vitae.CV_Edit
<PageTitle>Old School</PageTitle>

@{
// ALGEMENE OPMERKING: Project is nog lang niet af en dus zit er nog code tussen die totaal fout is en is lang niet alles uitgewerkt zoals zou kunnen.
// ALGEMENE OPMERKING: Project is nog lang niet af en dus zit er nog code tussen die totaal fout is en is lang niet alles uitgewerkt zoals zou kunnen.
// ALGEMENE OPMERKING: Project is nog lang niet af en dus zit er nog code tussen die totaal fout is en is lang niet alles uitgewerkt zoals zou kunnen.
// ALGEMENE OPMERKING: Project is nog lang niet af en dus zit er nog code tussen die totaal fout is en is lang niet alles uitgewerkt zoals zou kunnen.
// ALGEMENE OPMERKING: Project is nog lang niet af en dus zit er nog code tussen die totaal fout is en is lang niet alles uitgewerkt zoals zou kunnen.
}
<style>
	body {
    display: block;
    margin: 0px;
}

table {
    border-radius: 4px;
    border: none;
    width: 200px;
}

td {
    border: none;
}

a {
    font-size: 14px;
    text-decoration: none !important;
}

    a:link {
        color: black;
    }

    a:visited {
        color: black;
    }

input {
    padding-left: 15px;
    padding-top: 5px;
    padding-bottom: 5px;
    border: 1px solid #ccc;
    border-radius: 24px;
    width: 150px;
    background-color: white;
}

    input[type=text]:focus {
        border: 1px solid #000;
    }

fieldset {
    border-radius: 24px;
    border-width: 2px;
    /*		text-align: center;*/
}

img {
    border-radius: 24%;
    -webkit-transform: scaleX(-1);
    transform: scaleX(-1);
}

button {
    background-color: transparent;
    border: none;
    align-items: center;
}

.bg-item1 {
    grid-area: header;
	display:flex;
	align-content:center;
}

.bg-item2 {
    grid-area: menu;
	display:flex;
	/*align-content:center;*/
}

.bg-item3 {
    grid-area: main;
	display:flex;
	font-size:13px !important;
	color:black;
	align-content:center;
}

.bg-item4 {
    grid-area: right;
	display:flex;
	align-content:center;
}

.bg-item5 {
    grid-area: footer;
	display:flex;
	align-content:center;
}

.bg-item6 {
    grid-area: el1;
	display:flex;
	align-content:center;
}

.bg-item7 {
    grid-area: el2;
	display:flex;
	align-content:center;
}

.bg-item8 {
    grid-area: el3;
	display:flex;
	align-content:center;
}

.bg-item9 {
    grid-area: el4;
	display:flex;
	align-content:center;
}

.bg-item10 {
    grid-area: el5;
	display:flex;
	align-content:center;
}

.bg-item11 {
    grid-area: el6;
	display:flex;
	align-content:center;
}

.bg-item12 {
    grid-area: el7;
	display:flex;
	align-content:center;
}

.bg-item13 {
    grid-area: el8;
	display:flex;
	align-content:center;
}

.bg-item14 {
    grid-area: el9;
	display:flex;
	align-content:center;
}
.bg-item11 {
    grid-area: el10;
	display:flex;
	align-content:center;
}

.container {
    position: absolute;
	nowrap:wrap;
	width: 95.5vmax;
}


	@{
		string output = @"
.bg_grid-container {
    position: absolute;
    top: 0px;
    z-index: 0;
    display: grid;
    gap: 30px;    
    padding: 30px;
    border-radius: 24px;
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
";

		List<string> gridItems = new List<string> {
		"header",
        "menu",
        "main",
        "right",
        "footer",
        "el1",
        "el2",
        "el3",
        "el4",
        "el5",
        "el6",
		"el7",
        "el8",
		"el9"
		};

		int count = gridItems.Count();
		 output +=	"grid-template-areas: ";
		for (int i = 0; i < count; i++)
		{
				string weg = gridItems[Rand.getRandom.Next(0, count - i)];
				 output += Environment.NewLine + $"\""+ weg + $"\"" + " ";
				gridItems.Remove(weg);

	}
				<text>@output "el10" ; }</text>
	}

    .bg_grid-container > div {
        display: flex;
		align-items: center;
        flex-wrap: wrap;
        padding: 20px;
        font-size: 11px;
        border-radius: 30px;
        text-align: left;
        flex-direction: column;
    }

/*@@media (min-width: 641px)*/
#top-r {
    padding: 10px;
    padding-left: 2rem !important;
    padding-right: 1.5rem !important;
    position: sticky;
    top: 0;
    z-index: 1;
    border-bottom: 1px solid #d6d5d5;
    /*justify-content: flex-end;*/
    height: 3.5rem;
    align-items: center;
}


.houseofcolors{

}

.btn-primary {
    color: #000;
    padding: 17px;
    /*width: 90px;*/
    border: 1px solid;
    border-color: gray;
    border-radius: 24px;
}

    .btn-primary:hover {
        transform: scale(0.7);
    }

.flex-container {
    position: relative;
    height: 100%;
    width: 100%;
    left: 0px;
    top: 0px;
    z-index: 3;
    display: flex;
	flex-wrap: wrap;
    padding-bottom: 15px;
	align-items: center;
    justify-content: center;
    background-color: none;
    border-radius: 24px;
}

    .flex-container > .DataDrager-A {
        margin: 10px;
        padding: 15px;
        font-size: 13px;
        border-radius: 24px;
        border: 1px solid rgb(100,100,100);
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

	.flex-container > .DataDrager-B  {
		display: flex;
		flex-direction: column;
		margin: 10px;
		padding: 15px;
		font-size: 13px;
		border-radius: 24px;
		border: 1px solid rgb(100,100,100);
		box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
		align-content: center;
		justify-content: center;
		margin-right: 20px
}

			.flex-container > .DataDrager-B  > div {
            margin: 10px;
            font-size: 13px;
            border-radius: 24px;
            border: 1px solid rgb(100,100,100);
        }

            .flex-container > header > div:hover {
                transform: scale(1.1);
            }

	#whitefont{
		color: white;
		border: 1px black;
	}

.basic {
    display: flex;
    padding: 15px;
    align-items: flex-end;
    justify-content: flex-end;
}
.DataDrager-B {
    display: flex;
    padding: 15px;
    align-content: center;
    justify-content: center;
    margin-right: 20px
}

.DataDrager-C {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
	
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.minus {
    background-image: url(minus-white.png);
}

.plus {
    background-image: url(plus-circle.png);
}

.rotate {
    padding: 5px;
    font-size: 11px;
    color: rgb(100,100,100);
    z-index: -1;
    position: relative;
}

.divcolorbuttons {
    
    margin: 5px;
    padding: 12px;
    font-size: 13px;
    border-radius: 24px;
    border: 1px solid rgb(100,100,100);
}

.nuance1, .nuance2, .nuance3, .nuance4, .nuance5, .nuance6 {
    border: 1px solid rgb(100,100,100);
    padding: 12px;
    width: 15px;
    height: 15px;
    border-radius: 55%;
    margin: 5px;
}

/*////////////////     KLEUREN     ////////////////////////////
 //////////////////    KLEUREN    ////////////////////////////
  //////////////////   KLEUREN   ///////////////////////////*/
.bg-item6 {background-color: hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(60,80)%);}
.bg-item7 {background-color: hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(50,90)%);}

.bg_grid-container {background-color: hsl(@Top.basisKleurSL(50,53,18,22));}
.bg_grid-container > div {
	background-color: hsl(@Top.basisKleurSL(60,65,90,95));
	color: hsl(@Top.basisKleurSL(47,74,55,64)); 
}

#top-r {background-color: hsl(@Top.basisKleur_Min, 100%,80%);}
.btn-primary {background-color: hsl(@Top.basisKleurSL(98,101,48,52));} 
.btn-primary:hover {background-color: hsl(@(Top.basisKleur + 20), 100%, 50%);}

.flex-container > .DataDrager-A {
	background-image: linear-gradient(to left top, hsl(@Top.basisKleurSL(30, 80, 20,90)), hsl(@Top.basisKleurSL(30, 80, 20, 90)));}
.flex-container > .DataDrager-B  {
	background-color: hsl(@Top.basisKleurSL(20, 60, 20, 80));}
.flex-container > .DataDrager-B  > div {
	background-color: hsl(@Top.basisKleurSL(45, 60, 40, 42));}
.DataDrager-C {background-color: hsl(@Top.basisKleurSL(20, 70, 20, 80));}

.divcolorbuttons {background-color: hsl(@Top.basisKleurSL(20,70,20,80));} 

.nuance1 {background-color: hsl(@Top.basisKleurSL(79,80,55,60));}
.nuance2 {background-color: hsl(@Top.basisKleurSL(40,80,35,45));}
.nuance3 {background-color: hsl(@Top.basisKleurSL(40,80,47,60));}
.nuance4 {background-color: hsl(@Top.basisKleurSL(40,80,65,75));}
.nuance5 {background-color: hsl(@Top.basisKleurSL(40,80,75,85));}
.nuance6 {background-color: hsl(@Top.basisKleurSL(40,80,85,95));}

.houseofcolorsBEE{
	padding:10px;
	border-radius: 24px 0px;
	background-color:hsl(@Top.basisKleur,100%,50%);
} 
.houseofcolorsHoC{
	padding:10px;
	border-radius: 24px 0px;
	background-color:hsl(@Top.basisKleurTegenover,100%,50%);
}
.houseofcolorsHusk{
	padding:10px;
	border-radius: 24px 0px;
	background-color:hsl(@Top.basisKleur_Plus,100%,50%);
}
.houseofcolorsHeerlen{
	padding:10px;
	border-radius: 24px 0px;
	background-color:hsl(@Top.basisKleur_Min,100%,50%);
}

	<text>@hidden</text>

</style>

@*Wat is Blazor?
	Het is de combinatie van Razor (server) en Browser(client).
	Razor: scripting pakket (frame-work) van Microsoft voor samewerking tussen server- en clientsite code (html, css, javascript). Razor is PHP-achtig. Overigens is Razor maar een van de pakketten van Microsoft voor clientsite.
	Terug naar Blazor. Blazer maakt het mogelijk om een hoop handige functionaliteiten van de server naar de client te verleggen. Met Blazor kun je veel javascript code overslaan omdat je rechtstreeks met de html Dom werkt. Deze technologie wordt ondersteund door alle grote browsers.
	Html Dom? Dat is het binnenste van de browser. Tot voor kort het exclusieve domein van javascript maar nu is er met WASP een nieuwe speler erbij gekomen. Wasp?
	Blazor is rommelig. Tenminste, als je het pas leert is het lastig om alles een beetje goed te structureren. Er zitten zoveel beperkingen in het op een pagina mogelijk maken van c#, html en css dat zelfs de auto format functie van vs 2022 het niet aankan.
	Dat helpt natuurlijk niet mee om dit spul te leren.
	Elke Razor pagina (xxx.razor) kan een eigen xxx.cs en een xxx.razor.css hebben. De css werkt dan exclusief voor die pagina. De cs file kan ook vanuit andere pagina's worden gebruikt.
	Elke .razor file wordt een component genoemd. Je kunt vanuit een parent component childcomponenten aanroepen. Etc. Met allerlei functies waarvan we er pas een paar hebben verkend kun je heel ingewikkelde
	apps bouwen die zo'n beetje alles doen wat je wil behalve de afwas en hond uitlaten. 	
*@

@{
	// Hier begint het gegoochel met de kleuren. Uitgangspunt is om bij elke click op een van de gekleurde buttons op de site een kleurencombinatie 
	// op het scherm te brengen van bij elkaar passende kleuren. 

	// Hoe doe je dat? 
	// Kleuren die direct naast elkaar liggen in de kleurencirkel vloeken niet met elkaar. Dit principe hebben 
	// we in code verwerkt. Een random trekt een willekeurige kleur in het deelgebied dat door een van de gekleurde buttons op de site 
	// vertegenwoordigd wordt. Dit is de basiskleur van het palet dat op het scherm gebruikt wordt. De code zorgt ervoor dat nog twee 
	// kleuren worden toegevoegd aan het palet: de basiskleurplus en de basiskleurmin. De plus ligt aan de ene kant naast de
	// basiskleur in de kleurencirkel en de min aan de andere kant. De method hieronder bepaalt hoever de kleuren plus en min uit elkaar liggen. 
	// Hoe dichter ze bij elkaar liggen hoe kleiner de kleurverschillen. Deze kleuren komen op allerlei plaatsen terug op het scherm maar 
	// ze worden wel telkens nog eens door de random onder handen genomen wat betreft verzadiging en helderheid. De kans dat je twee keer 
	// hetzelfde kleurenpalet achter elkaar krijgt is zo klein dat het onwaarschijnlijk is dat je dit ooit zal meemaken. 
	// Overigens kun je ook de tegenpool van de basiskleur nog gebruiken. Die wordt meteen ook aangemaakt en door de afstand van de plus 
	// tot de min hoog te zetten kun je ook kleurcombi's krijgen die wel vloeken.

	// De kleuren worden door de css gestuurd. We gebruiken hier niet de bekende rgb methode maar de hsl methode. H staat voor hue, 
	// s voor saturation en l voor lightness. De hue kan een int zijn in de range 0-360 en vertegenwoordigt een van de 360 kleuren 
	// uit de kleurcirkel. Met de hsl methode kun je dus vrij eenvoudig met code de kleuren op elkaar afstemmen. 
	// Vraag: wie ziet niet de potentie van het door ons bedachte algoritme?  	

	Top.SetValues(Colors.button, 10);
	if (teller > 0)
	{
	// Object XMLData wordt aangemaakt en bij constructie wordt de juiste XML file ingelezen en omgezet naar een Curriculum object
	// om te voorkomen dat telkens een nieuw XMLData object wordt aangemaakt als de pagina aangeroepen wordt hebben we de truc met 
	// teller bedacht. 
	XmlData = new XMLData();
	Curriculum = @XmlData.GetCurriculum();
	teller++;
	}
}
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    Hier begint de html XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX       HEADER          XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->

<div id="top-r" style="border-radius:24px;">
	<p style="text-align: center;">
		&nbsp;&nbsp;&nbsp;&nbsp; 
		<span class="houseofcolorsBEE">&nbsp;&nbsp;<b>BEƎ-Ideas</b>&nbsp;&nbsp;&nbsp;</span>&nbsp;
		<span class="houseofcolorsHoC">&nbsp;&nbsp;<b>H</b>ouse of <b>C</b>olors&nbsp;&nbsp;</span>&nbsp; 
		<span class="houseofcolorsHusk">&nbsp;&nbsp;<b>H</b>uskensweg 17b&nbsp;&nbsp;</span>&nbsp;
		<span class="houseofcolorsHeerlen">&nbsp;&nbsp;<b>H</b>eerlen&nbsp;&nbsp;</span>&nbsp;
		<span class="houseofcolorsBEE">&nbsp;&nbsp;basiskleur:@Top.basisKleur&nbsp;&nbsp;</span>&nbsp;
		<span class="houseofcolorsHoC">&nbsp;&nbsp;tegenoverliggende kleur:@Top.basisKleurTegenover&nbsp;&nbsp;</span>&nbsp;
		<span class="houseofcolorsHusk">&nbsp;&nbsp;basiskleur Plus:@Top.basisKleur_Plus&nbsp;&nbsp;</span>&nbsp;
		<span class="houseofcolorsHeerlen">&nbsp;&nbsp;basiskleur Min: @Top.basisKleur_Min&nbsp;&nbsp;</span>
		<button class="plus" @onclick="ShowLinks">&nbsp;</button>
		<button style="border-radius: 24px; background-color:white" @onclick="Save">Save</button>
		
	</p>
	<br />
	@{/*<div id="hidden">sssssssssssssssssssssss</div>*/
		}
</div>
	<br />

<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    CONTAINER WAAR ALLES INZIT   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->

<div class="container">

<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    ACHTERGROND DIV die met css grid werkt  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
	
<div class="bg_grid-container">      
		<div class="bg-item1">
			Verdwenen beroepen:
			@{<text>@VerdwenenBeroepen(1);</text>returnstring = "";}
		</div>

		<div class="bg-item2">
			Verdwenen beroepen:
			@{<text>@VerdwenenBeroepen(2);</text>returnstring = "";}
		</div>

		<div class="bg-item3" style="background-color:hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(70,90)%) !important;">

		@{<text>@PrintSlogans(2);</text>returnstring = "";}
		
		</div>
		<div class="bg-item4" style="background-color:hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(70,90)%) !important;"></div>

		<div class="bg-item5">
			Verdwenen beroepen:
			@{<text>@VerdwenenBeroepen(1);</text>returnstring = "";}
		</div>

		<div class="bg-item6" style="background-color:hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(70,90)%) !important;"></div>
		<div class="bg-item7" style="background-color:hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(70,90)%) !important;"></div>

		<div class="bg-item8">
			Verdwenen beroepen:
			@{<text>@VerdwenenBeroepen(2);</text>returnstring = "";}	
		</div>

		<div class="bg-item9" style="background-color:hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(70,90)%) !important;"></div>
		<div class="bg-item10" style="background-color:hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(70,90)%) !important;"></div>

		<div class="bg-item11">
			Verdwenen beroepen:
			@{<text>@VerdwenenBeroepen(1);</text>returnstring = "";}
		</div>

		<div class="bg-item12" style="background-color:hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(70,90)%) !important;"></div>
		<div class="bg-item13" style="background-color:hsl(@Top.basisKleur_Min, 100%,@Rand.getRandom.Next(70,90)%) !important;"></div>

		<div class="bg-item14">
			Verdwenen beroepen:
			@{<text>@VerdwenenBeroepen(1);</text>returnstring = "";}
		</div>

		<div class="bg-item15">
			Verdwenen beroepen:
			@{<text>@VerdwenenBeroepen(1);</text>returnstring = "";}
		</div>
	</div>

<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  VOORGROND DIV die met css flexbox werkt  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->

	<div class="flex-container" style="padding-top:30px;"> 
		<header class="DataDrager-B" style="margin-right:20px">
			<div class="divcolorbuttons">
				<input type="hidden" @bind="Top.basisKleur" />
				<button style="background-color:@Colors.Rood" class="btn-primary" @onclick="Rood">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>
			</div>
			<div class="divcolorbuttons">
				<button style="background-color:@Colors.Geel;" class="btn-primary"	@onclick="Geel">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>
			</div>
			<div class="divcolorbuttons">
				<button style="background-color:@Colors.Groen" class="btn-primary" @onclick="Groen">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>
			</div>
			<div class="divcolorbuttons">
				<button style="background-color:@Colors.Cyaan" class="btn-primary" @onclick="Cyaan">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>
			</div>
			<div class="divcolorbuttons">
				<button style="background-color:@Colors.Blauw" class="btn-primary" @onclick="Blauw">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>
			</div>
			<div class="divcolorbuttons">
				<button style="background-color:@Colors.Magenta" class="btn-primary" @onclick="Magenta">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>
			</div>
		</header>

		<header class="DataDrager-B" style="border:none;background: transparent;display: flex; align-content: flex-end; margin-right:20px;">
			<br>
			<form>
				<div class="nuance6">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance5">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance4">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance3">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance2">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance1">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance2">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance3">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance4">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance5">&nbsp;&nbsp;&nbsp;</div>
				<div class="nuance6">&nbsp;&nbsp;&nbsp;</div>
			</form>
		</header>

@{
	// De onderstaande tags zijn Blazor tags die ervoor zorgen dat de objecten die nodig zijn om de data op de juiste plek te zetten 
	// worden doorgegeven aan EditDating. EditDating is een stukje html met c# variabelen dat op de plek van de tag ingelezen wordt.
	// 
	// <CascadingValue Value="@Curriculum">
	//				<CascadingValue Value="@XmlData">
	//					<EditDating />
	//				</CascadingValue>
	//</CascadingValue>

	// De onderstaande Blazor tags zorgen ervoor dat alles op de plek komt die we willen. De verschillende bestanden die worden
	// ingelezen worden componenten genoemend. Wat er in een component staat en waar je hem gebruikt bepaal je zelf. Dat is in een 
	// notedop hoe Blazor (maar ook Angular werkt).
}

		<div class="DataDrager-A" style="background-color:none; display: flex; justify-content:  center;">
			<div style="align-items: center; display: flex; justify-content: center;">
				<CascadingValue Value="@Curriculum">
					<CascadingValue Value="@XmlData">
						<EditDating />
					</CascadingValue>
				</CascadingValue>
			</div>
		</div>

		<div class="DataDrager-B" style="align-items: center; display: flex; justify-content: center;">
			<CascadingValue Value="@Curriculum">
				<CascadingValue Value="@XmlData">
					<EditLocatie />
				</CascadingValue>
			</CascadingValue>

			<CascadingValue Value="@Curriculum">
				<CascadingValue Value="@XmlData">
					<EditVrijetijdsbesteding />
				</CascadingValue>
			</CascadingValue>
		</div>

		<div class="DataDrager-B" style="align-items: center; display: flex; justify-content: center;">
			<CascadingValue Value="@Curriculum">
				<CascadingValue Value="@XmlData">
					<EditWerkervaring />
				</CascadingValue>
			</CascadingValue>
		</div>

		<div class="DataDrager-B" style="align-items: center; display: flex; justify-content: center;">
			<CascadingValue Value="@Curriculum">
				<CascadingValue Value="@XmlData">
					<EditOpleiding />
				</CascadingValue>
			</CascadingValue>
		</div>

		<div class="DataDrager-B" tyle="align-items: center; display: flex; justify-content: center;">
			<CascadingValue Value="@Curriculum">
				<CascadingValue Value="@XmlData">
					<EditVaardigheden />
				</CascadingValue>
			</CascadingValue>
		</div>

		<div class="DataDrager-B" style="background-color: hsl(@Top.basisKleur_Plus,@Rand.getRandom.Next(20, 80)%,@Rand.getRandom.Next(10, 80)%);align-items: center; display: flex; justify-content: center;">
			<CascadingValue Value="@Curriculum">
				<CascadingValue Value="@XmlData">
					<EditFunctions />
				</CascadingValue>
			</CascadingValue>
		</div>
	</div>
				<br />
		
</div>

<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXX C# CODE CODE CODE CODE CODE CODE XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->
<!--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-->

	@code
 {
	///////////// FIELDS ////////////////////////////////////////////////////////
	///////////// FIELDS ////////////////////////////////////////////////////////
	///////////// FIELDS ////////////////////////////////////////////////////////
	int teller = 1;

	XMLData XmlData;
	public Curriculum Curriculum;

	public Rand RandColor;

	string returnstring = "";
	string returnAstring = "";

	// Deze hard gecodeerde stringarray is natuurlijk helemaal fout in een bedrijfsmatige setting. Maar we gebruiken hem gewoon omdat 
	// hij hier werkt zonder dat we spatjes hoeven uit te halen met een database of xml file waar we dan de data uit zouden ophalen
	// als we de hardcoding willen vermijden.

	string[] beroepen = new string[]
	{
		"Aanspreker",
		"Afhouder",
		"Baker",
		"Baljuw",
		"Barbier",
		"Bieleman",
		"Boekventer",
		"Brikkenbekker",
		"Buntsteken",
		"Chirurgijn",
		"Crasseur",
		"Doodbidder",
		"Gemeentebode",
		"Gezworene",
		"Gladiator",
		"Goudzoeker",
		"Griendwerker",
		"Halfer",
		"Harelbeekse spijker",
		"Hoefsmid",
		"Hondenslager",
		"IJkmeester",
		"Inbakker",
		"Kalverschetser",
		"Kantonnier",
		"Kiepkerel",
		"Kinkenvoerder",
		"Kolenboer",
		"Eendenkooi",
		"Kopiist",
		"Korenmeter",
		"Kraankind",
		"Krasmeester",
		"Landdrost",
		"Lantaarnopsteker",
		"Lattenklieven",
		"Letterzetter",
		"Librariër",
		"Marconist",
		"Marskramer",
		"Melkboer",
		"Melkmeisje",
		"Min",
		"Minstreel",
		"Neerslager",
		"Nieuwmarkters",
		"Omtoor",
		"Opprikkelateur",
		"Orgeltrapper",
		"Oude-jongen",
		"Parlevinker",
		"Peek",
		"Persemier",
		"Platlandicus",
		"Plattelandsheelmeester",
		"Porder",
		"Programmeur Algol",
		"Programmeur Basic",
		"Programmeur Cobol",
		"Provoost",
		"Publicanus",
		"Putjesschepper",
		"Rattenvanger",
		"Redger",
		"Reepschieter",
		"Rentmeester",
		"Richter",
		"Rotmeester",
		"Scharensliep",
		"Scheepsjager",
		"Scheepsjongen",
		"Schelpenvisser",
		"Schepen",
		"Scholaster",
		"Schoolmeester",
		"Schooltandarts",
		"Schotter",
		"Schout",
		"Speeljongen",
		"Spijkermaker",
		"Stadsomroeper",
		"Stenograaf",
		"Stoker",
		"Straatzanger",
		"Stronttonnetjesschepper",
		"Stuurmansmaat",
		"Tabellioen",
		"Telegrafist",
		"Teuthandelaar",
		"Tollenaar",
		"Typiste WordPerfect",
		"Veldwachter",
		"Velleman",
		"Vilder",
		"Voddenman",
		"Voorproever",
		"Vorster",
		"Vuurtorenwachter",
		"Wachter",
		"Wagenmaker",
		"Wijnroeier",
		"Zakkendrager"
	};
	
	string[] Slogans = new string[]
	{
		"Volhardend",
		"Probleemoplosser",
		"Creatief",
		"Doener",
		"teamplayer",
		"enthousiast",
		"Besluitvaardig",
		"doorzetter",
		"servicegericht",
	};

	// Het object dat bij elke klik opnieuw wordt aangemaakt en het kleurenpalet bevat
	Colors Top = new Colors();

	string hidden = @"#hidden\{visibility:hidden; display:none; \}";

	//////////// METHODS ////////////////////////////////////////////////////////
	//////////// METHODS ////////////////////////////////////////////////////////
	//////////// METHODS ////////////////////////////////////////////////////////

	//Deze method is nog niet actief
	void ShowLinks() 
	{
		hidden = @"#hidden\{visibility:visible; display:block; \}";
	}

	// de onderstaande 2 methods zorgen ervoor dat de divs in de background div worden gevuld met willekeurig getrokken strings uit de 
	// hierboven gedefinieerde stringarrays.
	string VerdwenenBeroepen(int i)
	{
		StringBuilder sb = new StringBuilder();
		for (i = 0; i < 1 * beroepen.Count(); i++)
			{
				sb.Append("  - ♰" + beroepen[Rand.getRandom.Next(0, beroepen.Count() - 1)]);
			}
			int a = sb.ToString().Count();
			
			return sb.ToString();
	}


	string PrintSlogans(int i)
	{
		StringBuilder sb = new StringBuilder();
		for (i = 0; i < 11 * Slogans.Count(); i++)
			{
				sb.Append(" - " + Slogans[Rand.getRandom.Next(0, Slogans.Count() - 1)]);
			}
			int a = sb.ToString().Count();
			
			return sb.ToString();
	}
	////////////////////////////////////////////////////////////////////////////
	// Object Curriculum wordt omgezet naar XML - XML wordt naar file geschreven
	////////////////////////////////////////////////////////////////////////////
	private void Save()
	{	XmlData.Save(Curriculum);}


// deze void methods zorgen ervoor dat de method Top.SetValues(Colors.button, 10) ook weten 
// in welk kleurgebied de random basiskleur moet worden getrokken  
	void Rood()
	{	Colors.button = "Rood";}

	void Oranje()
	{	Colors.button = "oranje";}

	void Geel()
	{	Colors.button = "Geel";}

	void Groen()
	{	Colors.button = "Groen";}

	void Cyaan()
	{	Colors.button = "Cyaan";	}

	void Blauw()
	{	Colors.button = "Blauw";}

	void Magenta()
	{	Colors.button = "Magenta";}
	}









